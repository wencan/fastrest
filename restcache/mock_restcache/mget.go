// Code generated by MockGen. DO NOT EDIT.
// Source: mget.go

// Package mock_restcache is a generated GoMock package.
package mock_restcache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMStorage is a mock of MStorage interface.
type MockMStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMStorageMockRecorder
}

// MockMStorageMockRecorder is the mock recorder for MockMStorage.
type MockMStorageMockRecorder struct {
	mock *MockMStorage
}

// NewMockMStorage creates a new mock instance.
func NewMockMStorage(ctrl *gomock.Controller) *MockMStorage {
	mock := &MockMStorage{ctrl: ctrl}
	mock.recorder = &MockMStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMStorage) EXPECT() *MockMStorageMockRecorder {
	return m.recorder
}

// MGet mocks base method.
func (m *MockMStorage) MGet(ctx context.Context, keys []string, destSlicePtr interface{}) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, keys, destSlicePtr)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockMStorageMockRecorder) MGet(ctx, keys, destSlicePtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockMStorage)(nil).MGet), ctx, keys, destSlicePtr)
}

// MSet mocks base method.
func (m *MockMStorage) MSet(ctx context.Context, keys []string, destSlice interface{}, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", ctx, keys, destSlice, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockMStorageMockRecorder) MSet(ctx, keys, destSlice, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockMStorage)(nil).MSet), ctx, keys, destSlice, ttl)
}
