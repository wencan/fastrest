// Code generated by MockGen. DO NOT EDIT.
// Source: restserver/httpserver/handler.go

// Package mock_httpserver is a generated GoMock package.
package mock_httpserver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandling is a mock of Handling interface.
type MockHandling struct {
	ctrl     *gomock.Controller
	recorder *MockHandlingMockRecorder
}

// MockHandlingMockRecorder is the mock recorder for MockHandling.
type MockHandlingMockRecorder struct {
	mock *MockHandling
}

// NewMockHandling creates a new mock instance.
func NewMockHandling(ctrl *gomock.Controller) *MockHandling {
	mock := &MockHandling{ctrl: ctrl}
	mock.recorder = &MockHandlingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandling) EXPECT() *MockHandlingMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandling) Handle(ctx context.Context, request interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, request)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlingMockRecorder) Handle(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandling)(nil).Handle), ctx, request)
}

// NewRequest mocks base method.
func (m *MockHandling) NewRequest() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockHandlingMockRecorder) NewRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockHandling)(nil).NewRequest))
}
